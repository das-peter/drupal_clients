<?php
// $Id$
/**
 * @file
 * Clients module - handles keys and service connections and provides an API for  clients
 * @author Django Beatty adub.com
 */
 
/**
 *
 */
require_once('clients.inc'); 

/**
 * Implementation of hook_help()
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function clients_help($path, $arg) {
  $output = '';  
  switch ($path) {
    case "admin/help#clients":
      $output = '<p>'.  t("Clients API .") .'</p>';
      break;
  }
  return $output;
} 

/**
 * Implementation of hook_perm()
 * @return array An array of valid permissions for the clients module
 */
function clients_perm() {
  return array('clients admin');
} 

/**
 * Implementation of hook_menu()
 */
function clients_menu() {

  $items = array();

  $items['admin/settings/clients'] = array(
    'title' => 'Clients',
    'page callback' => 'clients_services',
    'page arguments' => array('clients_admin'),
    'access arguments' => array('clients admin'),
    'type' => MENU_NORMAL_ITEM,
   );

   $items['admin/settings/clients/service'] = array(
     'title' => 'Services',
     'description' => 'List services',
     'page callback' => 'clients_services',
     'page arguments' => array('clients_admin'),
     'access arguments' => array('clients admin'),
     'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  
   $items['admin/settings/clients/cache'] = array(
     'title' => 'Performance',
     'description' => 'Clients cache settings',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('clients_admin_cache'),
     'access arguments' => array('clients admin'),
     'type' => MENU_LOCAL_TASK,
    );
    
   $items['admin/settings/clients/service/%'] = array(
     'title' => 'Show service',
     'description' => 'Show service',
     'page callback' => 'clients_view',
     'page arguments' => array(4),
     'access arguments' => array('clients admin'),
     'type' => MENU_CALLBACK,
    );
   
   $items['admin/settings/clients/service/delete/%'] = array(
     'title' => 'Delete service',
     'description' => 'Delete a service',
     'page callback' => 'clients_delete',
     'page arguments' => array(5),
     'access arguments' => array('clients admin'),
     'type' => MENU_CALLBACK,
    );
   
  return $items;
} 

/**
 * Set cache time in minutes
 * @return array Form
 */
function clients_admin_cache() {
  $form = array();

  $form['clients_cache_time'] = array(
    '#type' => 'select',
    '#title' => t('Local cache time'),
    '#default_value' => variable_get('clients_cache_time', '0'), // change default in production
    '#options' => array(
      '0' => t('No cache'),
      'cron' => t('Refresh on next cron'),
      '60' => t('1 hour'),
      '720' => t('12 hours'),
      '2880' => t('2 days'),
    ),
    '#description' => t("Minimum cache lifetime (if set, content will refresh on the next cron run after this time has elapsed)"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
} 

/**
 *
 */
function clients_delete_form(&$form_state, $arg) {
    $service = ClientsUtils::loadBaseConfig((int)$arg);    
    $form = array();
    $form['sid'] = array('#type' => 'value', '#value' => $arg); 
    $form['name'] = array('#type' => 'value', '#value' => $service->name); 
    $form['check'] = array(
      '#type' => 'checkbox', 
      '#title' => 'Really delete service - '. $service->name .'?', 
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );

    return $form;
}

/**
 *
 */
function clients_delete($arg) {
    return drupal_get_form('clients_delete_form', $arg);
}

/**
 *
 */
function clients_delete_form_validate($form_id, $form_values) {
  if ($form_values['values']['check'] != 1) {
    form_set_error('', t('Checkbox not selected.'));
  }    
}

/**
 *
 */
function clients_delete_form_submit($form_id, $form_values) {
    $sid = (int)$form_values['values']['sid'];
    $baseConfig = ClientsUtils::loadBaseConfig($sid);

    // defines hook_clients_load
    $result = module_invoke_all('clients_delete', $baseConfig->type, $sid);
    drupal_set_message(t('Service deleted: '). $form_values['values']['name']);
    drupal_goto('admin/settings/clients/service'); // return doesn't work!!!
}

/**
 * defines hook_clients_call
 */
function clients_call($service_form) {
//dpm($service_form);
    $service = ClientsUtils::loadBaseConfig((int)$service_form['clients_sid']);

    return module_invoke_all('clients_call', $service, $service_form);
}

/**
 * hook_clients_service_methods, define methods available for a service
 */
function clients_service_methods($sid) {
    $service = ClientsUtils::loadBaseConfig($sid);      
    return module_invoke_all('clients_service_methods', $service->type);
}

/**
 * hook_clients_service_options, configure options for a method
 */
function clients_service_options($sid, $method, $defaults = array()) {
    $service = ClientsUtils::loadBaseConfig($sid);     
    return module_invoke_all('clients_service_options', $service, $method, $defaults);
} 

/**
 *
 */
function clients_services() {
    $services = array();
    foreach(ClientsUtils::loadConfigs() as $sid => $service) {
        $services[] = array(
            'name' => l($service['name'], 'admin/settings/clients/service/'. $sid),
            'type' => $service['type'],
            'baseurl' => $service['baseurl'],
            );
    }
    return theme_table(array('Name', 'Type', 'Location'), $services);
}

/**
 *
 */
function clients_view($arg) {
// TODO hide password until clicked to prevent overshoulder attacks when keys are being checked

    drupal_set_breadcrumb(array(
            l(t('Home'), NULL), 
            l(t('Administer'), 'admin'), 
            l(t('Site configuration'), 'admin/settings'), 
            l(t('Services'), 'admin/settings/clients'), 
            ));

    $baseConfig = ClientsUtils::loadBaseConfig((int)$arg);

    // defines hook_clients_load
    $service = module_invoke_all('clients_load', $baseConfig->type, $arg);
// add any service agnostic stuff here
    return theme_table(array(), $service);
}

/**
 * Implementation of hook_flush_caches()
 */
function clients_flush_caches() {
  return array('cache_clients');
}

