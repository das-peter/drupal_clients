<?php
// $Id$
/**
 * @file
 * Drupal Services backend for Clients module - handles keys and connections for Drupal Services clients
 * @author Django Beatty adub.com
 */
 
/**
 * Contains class extending Clients ClientsServicesBase
 */
require_once('services_drupal.inc'); 

/**
 * Implementation of hook_help()
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function services_drupal_help($path, $arg) {
  $output = '';  
  switch ($path) {
    case "admin/help#services_drupal":
      $output = '<p>'.  t("Clients - Drupal Services.") .'</p>';
      break;
  }
  return $output;
} 

/**
 * Implementation of hook_perm()
 * @TODO 
 * @return array An array of valid permissions for the services_drupal module
 */
function services_drupal_perm() {
  return array('services_drupal admin');
} 

/**
 * Implementation of hook_menu()
 */
function services_drupal_menu() {
  $items = array();
  $items['admin/settings/clients/services_drupal'] = array(
     'title' => 'Add Drupal service',
     'description' => 'Add Drupal service',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('services_drupal_config', 'add'),
     'access arguments' => array('services_drupal admin'),
     'weight' => 10,
     'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/clients/services_drupal/edit/%'] = array(
     'title' => 'Edit Drupal service',
     'description' => 'Edit Drupal service',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('services_drupal_config', 'edit', 5),
     'access arguments' => array('services_drupal admin'),
     'weight' => 10,
     'type' => MENU_LOCAL_TASK,
  );

  $items['admin/settings/clients/services_drupal/admin'] = array(
    'title' => 'Drupal Services',
    'description' => 'Drupal Services Configuration',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('services_drupal_admin', 'add'),
     'access arguments' => array('services_drupal admin'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
} 

/**
 * @return array Form
 */
function services_drupal_admin() {
  $form = array();
  if(ClientsServicesDrupal::getkey() == 'replace this with a strong password') {
      $keyinfo = t('<strong>You still need to set this key. Go to this module\'s install directory and change the file \'services_drupal_key.inc\'</strong>');
  }
  else {
      $keyinfo = t('The key is set to: <em>'. ClientsServicesDrupal::getkey() .'</em>');
  }
  $form['crypt_info'] = array(
    '#value' => t("<p>Remote login passwords are stored using reversible encryption. This means that they should be reasonably safe in case anybody has access to your database if you choose a strong key. This key is stored in plaintext in the file 'services_drupal.key' in this module's install directory and can include any characters.</p><p>!keyinfo</p><p>The PEAR <a href=\"http://pear.php.net/package/Crypt_Blowfish\">Crypt_Blowfish</a> package must be installed for this module to work (see <a href=\"http://pear.php.net/manual/en/guide.users.commandline.installing.php\">installing packages</a>). If you do not have permission to install PEAR packages, you can download this to a local directory.</p>", array('!keyinfo' => $keyinfo)),
  );
  $form['services_drupal_cryptdir'] = array(
    '#type' => 'textfield',
    '#title' => t('PEAR Crypt directory'),
    '#default_value' => variable_get('services_drupal_cryptdir', ''),
    '#size' => 75,
    '#maxlength' => 400,
    '#description' => t('Usually your PEAR path. Must be full system path with leading slash'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
} 



/**
 * @see http://services_drupal.com/api for API keys
 * @return array Form
 */
function services_drupal_config(&$form_state, $op, $sid = '') {
  $form = array();

  if($sid) {
    $service = ClientsServicesDrupal::configLoad((int)$sid);
    $form['sid'] = array(
      '#type' => 'value',
      '#value' => $sid,
    );
  }
  
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Service name'),
    '#default_value' => $sid ? $service->name : '',
    '#size' => 50,
    '#maxlength' => 100,
    '#description' => t('Must be unique'),
    '#required' => TRUE,
  );
  $form['baseurl'] = array(
    '#type' => 'textfield',
    '#title' => t('Service base URL'),
    '#default_value' => $sid ? $service->baseurl : '',
    '#size' => 50,
    '#maxlength' => 100,
//    '#description' => t('Service base URL'),
    '#required' => TRUE,
  );
  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#default_value' =>  $sid ? $service->domain : '',
    '#size' => 50,
    '#maxlength' => 100,
//    '#description' => t('Domain'),
    '#required' => TRUE,
  );
  $form['servicekey'] = array(
    '#type' => 'textfield',
    '#title' => t('Service key'),
    '#default_value' =>  $sid ? $service->servicekey : '',
    '#size' => 50,
    '#maxlength' => 40,
    '#attributes' => array('autocomplete' => 'off'),
//    '#description' => t('Key'),
    '#required' => TRUE,
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Service username'),
    '#default_value' =>  $sid ? $service->username : '',
    '#size' => 30,
    '#maxlength' => 60,
    '#attributes' => array('autocomplete' => 'off'),
//    '#description' => t('Service username'),
    '#required' => TRUE,
  );
  
  $password_desc = $sid ? 
    t('Leave blank unless you want to change this.') : '';
    
  $form['password'] = array(
    '#type' => 'password',
    '#title' => t('Service password'),
    '#size' => 30,
    '#maxlength' => 60,
    '#attributes' => array('autocomplete' => 'off'),
    '#description' => $password_desc,
    '#required' => $op == 'add',
  );

  $form['methods_enabled'] = array(
    '#type' => 'textarea',
    '#title' => t('Services'),
    '#default_value' =>  $sid ? $service->methods_enabled : '',
    '#description' => t('List of Drupal services on remote servers that you want to enable here. One per line.'),
  );

  $form['views_enabled'] = array(
    '#type' => 'textarea',
    '#title' => t('Views'),
    '#default_value' =>  $sid ? $service->views_enabled : '',
    '#description' => t('List of Drupal views on remote servers that you want to enable here. One per line.'),
  );

  if($op == 'add') {
      $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Add service') );
    
      $form['#submit'] = array('services_drupal_add_submit_handler');
  }
  elseif($op == 'edit') {
      $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Edit service') );
    
      $form['#submit'] = array('services_drupal_edit_submit_handler');
  }

  return $form;
} 

/**
 * Submit handler
 * @return array Form
 */
function services_drupal_add_submit_handler($form, &$form_state) {
    ClientsServicesDrupal::configSave($form_state['values']);
}

/**
 * Submit handler
 * @return array Form
 */
function services_drupal_edit_submit_handler($form, &$form_state) {
    ClientsServicesDrupal::configEdit($form_state['values']);
}

/**
 * Implementation of hook_validate()
 */
function services_drupal_add_validate($form, &$form_state) {
    
    if(ClientsServicesDrupal::configLoad($form['name']['#value'])) {
        form_set_error('name', 'A service by this name already exists!');
    }

    $service = new stdClass;
    $service->name = $form['name']['#value'];
    $service->baseurl = $form['baseurl']['#value'];
    $service->domain = $form['domain']['#value'];
    $service->servicekey = $form['servicekey']['#value'];
    $service->username = $form['username']['#value'];
    $service->password = $form['password']['#value'];
    
    $testconnect = ClientsServicesDrupal::connect($service);
    if(!is_array($testconnect) || !isset($testconnect['sessid'])) {
        form_set_error('baseurl', "Couldn't connect");
    } else {
        $testuser = ClientsServicesDrupal::getUser($service);
        if(!is_array($testuser) || !isset($testuser['sessid'])) {
            form_set_error('username', isset($testuser->message) ? $testuser->message : "Couldn't log in");
        }
    }
} 

/**
 * Implementation of hook_clients_load
 */
function services_drupal_clients_load($type, $arg) {

    if($type == variable_get('services_drupal_type', 'services_drupal')){
        $service = ClientsServicesDrupal::configLoad((int)$arg);
        $rows = array(
            array('Name', $service->name),
            array('Base URL', $service->baseurl),
            array('Domain', $service->domain),
            array('Service Key', $service->servicekey),
            array('Service Username', $service->username),
            array('Service Password', $service->password),
            array('Enabled Services', nl2br($service->methods_enabled)),
            array('Enabled Views', nl2br($service->views_enabled)),
            array('Operations', l(t('Edit'), 'admin/settings/clients/services_drupal/edit/'. $arg) .' | '. l(t('Delete'), 'admin/settings/clients/service/delete/'. $arg)),
            );
        return $rows;
    }
}

/**
 * Implementation of hook_clients_delete
 */
function services_drupal_clients_delete($type, $arg) {
    if($type == variable_get('services_drupal_type', 'services_drupal')){
        ClientsServicesDrupal::configDelete($arg);
    }
}

/**
 * Implementation of hook_clients_methods
 */
function services_drupal_clients_service_methods($type) {
    if($type == variable_get('services_drupal_type', 'services_drupal')){
        return array(
            /**
             * @todo store available services with the config
             */
            'views.get'=>'views.get',
        );
    }
}

/**
 * Implementation of hook_clients_service_options
 */
function services_drupal_clients_service_options($service, $method, $defaults = array()) {
    if($service->type != variable_get('services_drupal_type', 'services_drupal')) {
        return;
    }
    
    $service = ClientsServicesDrupal::configLoad((int)$service->sid);
    $form = array();

    if($method == 'views.get') {

        // TODO a non-code way of getting these. Viewlist service from remote, form here or separate config file here. What happens when a view is remove on remote server?

        // builds views set in admin views_enabled textarea into a clean associative array suitable for form options
        $views = array_map('trim', explode("\n", trim($service->views_enabled))); 
        $views = array_combine($views, $views);    

        $form['view'] = array(
            '#type' => 'select',
            '#title' => t('View'),
            '#default_value' => $defaults['view'],
            '#options' => $views,
            '#description' => t('Choose view'),
        );
        $form['arguments']['first'] = array(
            '#type' => 'textfield', 
            '#title' => t('Argument'), 
            '#default_value' => $defaults['arguments']['first'],
            '#size' => 10, 
            '#maxlength' => 30, 
        );
        $form['offset'] = array(
            '#type' => 'textfield', 
            '#title' => t('Offset'), 
            '#default_value' => $defaults['offset'],
            '#size' => 3, 
            '#maxlength' => 4, 
        );
        $form['limit'] = array(
            '#type' => 'textfield', 
            '#title' => t('Limit'), 
            '#default_value' => $defaults['limit'],
            '#size' => 3, 
            '#maxlength' => 4, 
        );
    }
    else {
        /**
         * @todo some 'method not supported' handling
         */
    }
    return $form;
} 

/**
 * Implementation of hook_clients_call
 */
function services_drupal_clients_call($baseConfig, $serviceOptions) {
    if($baseConfig->type == variable_get('services_drupal_type', 'services_drupal')){
        $serviceConfig = ClientsServicesDrupal::configLoad((int)$baseConfig->sid);
        return ClientsServicesDrupal::call($serviceConfig, $serviceOptions);
    }
}


/**
 * Implementation of hook_nodeapi().
 */
function services_drupal_nodeapi(&$node, $op, $teaser) {
  switch ($op) {
    case 'load':
      break;
    case 'insert':
    
      if (isset($node->feedapi_node) && $node->feedapi_node->feed_item && $node->feedapi_node->feed_item->type == 'image') {
          // todo: lots of checking 

          $data = base64_decode(trim($node->feedapi_node->feed_item->images_data['_original']['file']));
          $feeditem = $node->feedapi_node->feed_item;
          $file = $feeditem->images_data['_original'];
          $filename = $file['fullname'];
          $destdir = file_directory_path(); // fix up hardcoded dir
          
          if(file_check_directory($destdir)) {              
              $file['filepath'] = file_save_data($data, $destdir .'/'. $filename, FILE_EXISTS_REPLACE);
              dvm($file['filepath']);
              //
              if($node->type != 'image'){
                  $imagenode = image_create_node_from($file['filepath'], $feeditem->title, $feeditem->body, $feeditem->taxonomy); 
                  if($imagenode) {
                      _image_build_derivatives($imagenode);
                  }
                  else {
                      // TODO watchdog
                  }
              }
              else {
               //   $node->images['_original'] = $file['filepath'];
               //   dvm($node);
                  
              }
          }
      }
      break;
    case 'update':
      if (isset($node->feedapi_node)) {
        if ($node->feedapi_node->feed_item) {
      //    dpm($node); dsm('updating');
        }
      }
      break;
    case 'delete':
      if (isset($node->feedapi_node)) {
      }
      if (isset($node->feed)) {
      }
      break;
  }
}

///////// think this doesn't get called and can be removed

/**
 * d7 @see http://api.drupal.org/api/function/drupal_write_record/7
 */
function services_drupal_file_save(stdClass $file) {
  $file->timestamp = REQUEST_TIME;
  $file->filesize = filesize($file->uri);

  if (empty($file->fid)) {
    drupal_write_record('file', $file);
    // Inform modules about the newly added file.
    module_invoke_all('file_insert', $file);
  }
  else {
    drupal_write_record('file', $file, 'fid');
    // Inform modules that the file has been updated.
    module_invoke_all('file_update', $file);
  }

  return $file;
}